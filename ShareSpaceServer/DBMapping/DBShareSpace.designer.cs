#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShareSpaceServer.DBMapping
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShareSpace")]
	public partial class DBShareSpaceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertConversation(Conversation instance);
    partial void UpdateConversation(Conversation instance);
    partial void DeleteConversation(Conversation instance);
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertEmailDomain(EmailDomain instance);
    partial void UpdateEmailDomain(EmailDomain instance);
    partial void DeleteEmailDomain(EmailDomain instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertGeoLocation(GeoLocation instance);
    partial void UpdateGeoLocation(GeoLocation instance);
    partial void DeleteGeoLocation(GeoLocation instance);
    partial void InsertHouseType(HouseType instance);
    partial void UpdateHouseType(HouseType instance);
    partial void DeleteHouseType(HouseType instance);
    partial void InsertHousing(Housing instance);
    partial void UpdateHousing(Housing instance);
    partial void DeleteHousing(Housing instance);
    partial void InsertHousingAppointment(HousingAppointment instance);
    partial void UpdateHousingAppointment(HousingAppointment instance);
    partial void DeleteHousingAppointment(HousingAppointment instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertSavedHousing(SavedHousing instance);
    partial void UpdateSavedHousing(SavedHousing instance);
    partial void DeleteSavedHousing(SavedHousing instance);
    partial void InsertSavedShareHousing(SavedShareHousing instance);
    partial void UpdateSavedShareHousing(SavedShareHousing instance);
    partial void DeleteSavedShareHousing(SavedShareHousing instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSchoolType(SchoolType instance);
    partial void UpdateSchoolType(SchoolType instance);
    partial void DeleteSchoolType(SchoolType instance);
    partial void InsertShareHousing(ShareHousing instance);
    partial void UpdateShareHousing(ShareHousing instance);
    partial void DeleteShareHousing(ShareHousing instance);
    partial void InsertShareHousingAppointment(ShareHousingAppointment instance);
    partial void UpdateShareHousingAppointment(ShareHousingAppointment instance);
    partial void DeleteShareHousingAppointment(ShareHousingAppointment instance);
    partial void InsertShareSpaceUser(ShareSpaceUser instance);
    partial void UpdateShareSpaceUser(ShareSpaceUser instance);
    partial void DeleteShareSpaceUser(ShareSpaceUser instance);
    partial void InsertWork(Work instance);
    partial void UpdateWork(Work instance);
    partial void DeleteWork(Work instance);
    #endregion
		
		public DBShareSpaceDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ShareSpaceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBShareSpaceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShareSpaceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShareSpaceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBShareSpaceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Conversation> Conversations
		{
			get
			{
				return this.GetTable<Conversation>();
			}
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<EmailDomain> EmailDomains
		{
			get
			{
				return this.GetTable<EmailDomain>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<GeoLocation> GeoLocations
		{
			get
			{
				return this.GetTable<GeoLocation>();
			}
		}
		
		public System.Data.Linq.Table<HouseType> HouseTypes
		{
			get
			{
				return this.GetTable<HouseType>();
			}
		}
		
		public System.Data.Linq.Table<Housing> Housings
		{
			get
			{
				return this.GetTable<Housing>();
			}
		}
		
		public System.Data.Linq.Table<HousingAppointment> HousingAppointments
		{
			get
			{
				return this.GetTable<HousingAppointment>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<SavedHousing> SavedHousings
		{
			get
			{
				return this.GetTable<SavedHousing>();
			}
		}
		
		public System.Data.Linq.Table<SavedShareHousing> SavedShareHousings
		{
			get
			{
				return this.GetTable<SavedShareHousing>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<SchoolType> SchoolTypes
		{
			get
			{
				return this.GetTable<SchoolType>();
			}
		}
		
		public System.Data.Linq.Table<ShareHousing> ShareHousings
		{
			get
			{
				return this.GetTable<ShareHousing>();
			}
		}
		
		public System.Data.Linq.Table<ShareHousingAppointment> ShareHousingAppointments
		{
			get
			{
				return this.GetTable<ShareHousingAppointment>();
			}
		}
		
		public System.Data.Linq.Table<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this.GetTable<ShareSpaceUser>();
			}
		}
		
		public System.Data.Linq.Table<Work> Works
		{
			get
			{
				return this.GetTable<Work>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _HouseNumber;
		
		private string _Street;
		
		private string _Ward;
		
		private string _District;
		
		private int _CityID;
		
		private int _LocationID;
		
		private EntitySet<Housing> _Housings;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
		private EntityRef<City> _City;
		
		private EntityRef<GeoLocation> _GeoLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnHouseNumberChanging(string value);
    partial void OnHouseNumberChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnWardChanging(string value);
    partial void OnWardChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    #endregion
		
		public Address()
		{
			this._Housings = new EntitySet<Housing>(new Action<Housing>(this.attach_Housings), new Action<Housing>(this.detach_Housings));
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			this._City = default(EntityRef<City>);
			this._GeoLocation = default(EntityRef<GeoLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseNumber", DbType="NVarChar(20)")]
		public string HouseNumber
		{
			get
			{
				return this._HouseNumber;
			}
			set
			{
				if ((this._HouseNumber != value))
				{
					this.OnHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._HouseNumber = value;
					this.SendPropertyChanged("HouseNumber");
					this.OnHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(40)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward", DbType="NVarChar(30)")]
		public string Ward
		{
			get
			{
				return this._Ward;
			}
			set
			{
				if ((this._Ward != value))
				{
					this.OnWardChanging(value);
					this.SendPropertyChanging();
					this._Ward = value;
					this.SendPropertyChanged("Ward");
					this.OnWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._GeoLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Housing", Storage="_Housings", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<Housing> Housings
		{
			get
			{
				return this._Housings;
			}
			set
			{
				this._Housings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_Address", Storage="_GeoLocation", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public GeoLocation GeoLocation
		{
			get
			{
				return this._GeoLocation.Entity;
			}
			set
			{
				GeoLocation previousValue = this._GeoLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeoLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoLocation.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._GeoLocation.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("GeoLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HousingID;
		
		private int _CreatorID;
		
		private System.Nullable<int> _ShareHousingID;
		
		private int _AlbumID;
		
		private string _AlbumName;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private EntitySet<Photo> _Photos;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnShareHousingIDChanging(System.Nullable<int> value);
    partial void OnShareHousingIDChanged();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnAlbumNameChanging(string value);
    partial void OnAlbumNameChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public Album()
		{
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHousingID", DbType="Int")]
		public System.Nullable<int> ShareHousingID
		{
			get
			{
				return this._ShareHousingID;
			}
			set
			{
				if ((this._ShareHousingID != value))
				{
					this.OnShareHousingIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHousingID = value;
					this.SendPropertyChanged("ShareHousingID");
					this.OnShareHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AlbumName
		{
			get
			{
				return this._AlbumName;
			}
			set
			{
				if ((this._AlbumName != value))
				{
					this.OnAlbumNameChanging(value);
					this.SendPropertyChanging();
					this._AlbumName = value;
					this.SendPropertyChanged("AlbumName");
					this.OnAlbumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Photo", Storage="_Photos", ThisKey="AlbumID", OtherKey="AlbumID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Album", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.Albums.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.Albums.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Album", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Albums.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Albums.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public City()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_Addresses", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="CityID", OtherKey="HometownID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private int _UserID;
		
		private string _CommentContent;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private int _HousingID;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCommentContentChanging(string value);
    partial void OnCommentContentChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    #endregion
		
		public Comment()
		{
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentContent", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CommentContent
		{
			get
			{
				return this._CommentContent;
			}
			set
			{
				if ((this._CommentContent != value))
				{
					this.OnCommentContentChanging(value);
					this.SendPropertyChanging();
					this._CommentContent = value;
					this.SendPropertyChanged("CommentContent");
					this.OnCommentContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL")]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Comment", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Comment", Storage="_ShareSpaceUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conversation")]
	public partial class Conversation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConversationID;
		
		private int _CreatorID;
		
		private int _RecipientID;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private EntitySet<Message> _Messages;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConversationIDChanging(int value);
    partial void OnConversationIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnRecipientIDChanging(int value);
    partial void OnRecipientIDChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public Conversation()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			this._ShareSpaceUser1 = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConversationID
		{
			get
			{
				return this._ConversationID;
			}
			set
			{
				if ((this._ConversationID != value))
				{
					this.OnConversationIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationID = value;
					this.SendPropertyChanged("ConversationID");
					this.OnConversationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL")]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientID", DbType="Int NOT NULL")]
		public int RecipientID
		{
			get
			{
				return this._RecipientID;
			}
			set
			{
				if ((this._RecipientID != value))
				{
					if (this._ShareSpaceUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientID = value;
					this.SendPropertyChanged("RecipientID");
					this.OnRecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Conversation_Message", Storage="_Messages", ThisKey="ConversationID", OtherKey="ConversationID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Conversation", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Conversations.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Conversations.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Conversation1", Storage="_ShareSpaceUser1", ThisKey="RecipientID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser1
		{
			get
			{
				return this._ShareSpaceUser1.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser1.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser1.Entity = null;
						previousValue.Conversations1.Remove(this);
					}
					this._ShareSpaceUser1.Entity = value;
					if ((value != null))
					{
						value.Conversations1.Add(this);
						this._RecipientID = value.UserID;
					}
					else
					{
						this._RecipientID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Conversation = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Conversation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Email")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DomainID;
		
		private string _LocalPart;
		
		private int _EmailID;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
		private EntityRef<EmailDomain> _EmailDomain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIDChanging(int value);
    partial void OnDomainIDChanged();
    partial void OnLocalPartChanging(string value);
    partial void OnLocalPartChanged();
    partial void OnEmailIDChanging(int value);
    partial void OnEmailIDChanged();
    #endregion
		
		public Email()
		{
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			this._EmailDomain = default(EntityRef<EmailDomain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					if (this._EmailDomain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalPart", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocalPart
		{
			get
			{
				return this._LocalPart;
			}
			set
			{
				if ((this._LocalPart != value))
				{
					this.OnLocalPartChanging(value);
					this.SendPropertyChanging();
					this._LocalPart = value;
					this.SendPropertyChanged("LocalPart");
					this.OnLocalPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="EmailID", OtherKey="EmailID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailDomain_Email", Storage="_EmailDomain", ThisKey="DomainID", OtherKey="DomainID", IsForeignKey=true)]
		public EmailDomain EmailDomain
		{
			get
			{
				return this._EmailDomain.Entity;
			}
			set
			{
				EmailDomain previousValue = this._EmailDomain.Entity;
				if (((previousValue != value) 
							|| (this._EmailDomain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailDomain.Entity = null;
						previousValue.Emails.Remove(this);
					}
					this._EmailDomain.Entity = value;
					if ((value != null))
					{
						value.Emails.Add(this);
						this._DomainID = value.DomainID;
					}
					else
					{
						this._DomainID = default(int);
					}
					this.SendPropertyChanged("EmailDomain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Email = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Email = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailDomain")]
	public partial class EmailDomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DomainID;
		
		private string _DomainName;
		
		private EntitySet<Email> _Emails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIDChanging(int value);
    partial void OnDomainIDChanged();
    partial void OnDomainNameChanging(string value);
    partial void OnDomainNameChanged();
    #endregion
		
		public EmailDomain()
		{
			this._Emails = new EntitySet<Email>(new Action<Email>(this.attach_Emails), new Action<Email>(this.detach_Emails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DomainName
		{
			get
			{
				return this._DomainName;
			}
			set
			{
				if ((this._DomainName != value))
				{
					this.OnDomainNameChanging(value);
					this.SendPropertyChanging();
					this._DomainName = value;
					this.SendPropertyChanged("DomainName");
					this.OnDomainNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailDomain_Email", Storage="_Emails", ThisKey="DomainID", OtherKey="DomainID")]
		public EntitySet<Email> Emails
		{
			get
			{
				return this._Emails;
			}
			set
			{
				this._Emails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.EmailDomain = this;
		}
		
		private void detach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.EmailDomain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderID;
		
		private string _GenderType;
		
		private EntitySet<ShareHousing> _ShareHousings;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnGenderTypeChanging(string value);
    partial void OnGenderTypeChanged();
    #endregion
		
		public Gender()
		{
			this._ShareHousings = new EntitySet<ShareHousing>(new Action<ShareHousing>(this.attach_ShareHousings), new Action<ShareHousing>(this.detach_ShareHousings));
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string GenderType
		{
			get
			{
				return this._GenderType;
			}
			set
			{
				if ((this._GenderType != value))
				{
					this.OnGenderTypeChanging(value);
					this.SendPropertyChanging();
					this._GenderType = value;
					this.SendPropertyChanged("GenderType");
					this.OnGenderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_ShareHousing", Storage="_ShareHousings", ThisKey="GenderID", OtherKey="RequiredGenderID")]
		public EntitySet<ShareHousing> ShareHousings
		{
			get
			{
				return this._ShareHousings;
			}
			set
			{
				this._ShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoLocation")]
	public partial class GeoLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Latitude;
		
		private decimal _Longitude;
		
		private int _LocationID;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLatitudeChanging(decimal value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(decimal value);
    partial void OnLongitudeChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    #endregion
		
		public GeoLocation()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(10,8) NOT NULL", IsPrimaryKey=true)]
		public decimal Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(11,8) NOT NULL", IsPrimaryKey=true)]
		public decimal Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_Address", Storage="_Addresses", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HouseType")]
	public partial class HouseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseTypeID;
		
		private string _HousingType;
		
		private EntitySet<Housing> _Housings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseTypeIDChanging(int value);
    partial void OnHouseTypeIDChanged();
    partial void OnHousingTypeChanging(string value);
    partial void OnHousingTypeChanged();
    #endregion
		
		public HouseType()
		{
			this._Housings = new EntitySet<Housing>(new Action<Housing>(this.attach_Housings), new Action<Housing>(this.detach_Housings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseTypeID
		{
			get
			{
				return this._HouseTypeID;
			}
			set
			{
				if ((this._HouseTypeID != value))
				{
					this.OnHouseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HouseTypeID = value;
					this.SendPropertyChanged("HouseTypeID");
					this.OnHouseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string HousingType
		{
			get
			{
				return this._HousingType;
			}
			set
			{
				if ((this._HousingType != value))
				{
					this.OnHousingTypeChanging(value);
					this.SendPropertyChanging();
					this._HousingType = value;
					this.SendPropertyChanged("HousingType");
					this.OnHousingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HouseType_Housing", Storage="_Housings", ThisKey="HouseTypeID", OtherKey="HouseTypeID")]
		public EntitySet<Housing> Housings
		{
			get
			{
				return this._Housings;
			}
			set
			{
				this._Housings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.HouseType = this;
		}
		
		private void detach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.HouseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Housing")]
	public partial class Housing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HousingID;
		
		private string _Title;
		
		private int _OwnerID;
		
		private int _Price;
		
		private bool _IsAvailable;
		
		private bool _IsExist;
		
		private int _HouseTypeID;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private System.Nullable<System.DateTimeOffset> _DateTimeExpired;
		
		private int _NumOfView;
		
		private int _NumOfSaved;
		
		private int _NumOfPeople;
		
		private int _NumOfRoom;
		
		private int _NumOfBed;
		
		private int _NumOfBath;
		
		private bool _AllowPet;
		
		private bool _HasWifi;
		
		private bool _HasAC;
		
		private bool _HasParking;
		
		private System.Nullable<System.TimeSpan> _TimeRestriction;
		
		private decimal _Area;
		
		private int _AddressID;
		
		private string _Description;
		
		private int _NumOfComment;
		
		private EntitySet<Album> _Albums;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<HousingAppointment> _HousingAppointments;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<SavedHousing> _SavedHousings;
		
		private EntitySet<ShareHousing> _ShareHousings;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<HouseType> _HouseType;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    partial void OnHouseTypeIDChanging(int value);
    partial void OnHouseTypeIDChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnDateTimeExpiredChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnDateTimeExpiredChanged();
    partial void OnNumOfViewChanging(int value);
    partial void OnNumOfViewChanged();
    partial void OnNumOfSavedChanging(int value);
    partial void OnNumOfSavedChanged();
    partial void OnNumOfPeopleChanging(int value);
    partial void OnNumOfPeopleChanged();
    partial void OnNumOfRoomChanging(int value);
    partial void OnNumOfRoomChanged();
    partial void OnNumOfBedChanging(int value);
    partial void OnNumOfBedChanged();
    partial void OnNumOfBathChanging(int value);
    partial void OnNumOfBathChanged();
    partial void OnAllowPetChanging(bool value);
    partial void OnAllowPetChanged();
    partial void OnHasWifiChanging(bool value);
    partial void OnHasWifiChanged();
    partial void OnHasACChanging(bool value);
    partial void OnHasACChanged();
    partial void OnHasParkingChanging(bool value);
    partial void OnHasParkingChanged();
    partial void OnTimeRestrictionChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeRestrictionChanged();
    partial void OnAreaChanging(decimal value);
    partial void OnAreaChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNumOfCommentChanging(int value);
    partial void OnNumOfCommentChanged();
    #endregion
		
		public Housing()
		{
			this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._HousingAppointments = new EntitySet<HousingAppointment>(new Action<HousingAppointment>(this.attach_HousingAppointments), new Action<HousingAppointment>(this.detach_HousingAppointments));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._SavedHousings = new EntitySet<SavedHousing>(new Action<SavedHousing>(this.attach_SavedHousings), new Action<SavedHousing>(this.detach_SavedHousings));
			this._ShareHousings = new EntitySet<ShareHousing>(new Action<ShareHousing>(this.attach_ShareHousings), new Action<ShareHousing>(this.detach_ShareHousings));
			this._Address = default(EntityRef<Address>);
			this._HouseType = default(EntityRef<HouseType>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseTypeID", DbType="Int NOT NULL")]
		public int HouseTypeID
		{
			get
			{
				return this._HouseTypeID;
			}
			set
			{
				if ((this._HouseTypeID != value))
				{
					if (this._HouseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HouseTypeID = value;
					this.SendPropertyChanged("HouseTypeID");
					this.OnHouseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeExpired", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> DateTimeExpired
		{
			get
			{
				return this._DateTimeExpired;
			}
			set
			{
				if ((this._DateTimeExpired != value))
				{
					this.OnDateTimeExpiredChanging(value);
					this.SendPropertyChanging();
					this._DateTimeExpired = value;
					this.SendPropertyChanged("DateTimeExpired");
					this.OnDateTimeExpiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfView", DbType="Int NOT NULL")]
		public int NumOfView
		{
			get
			{
				return this._NumOfView;
			}
			set
			{
				if ((this._NumOfView != value))
				{
					this.OnNumOfViewChanging(value);
					this.SendPropertyChanging();
					this._NumOfView = value;
					this.SendPropertyChanged("NumOfView");
					this.OnNumOfViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfSaved", DbType="Int NOT NULL")]
		public int NumOfSaved
		{
			get
			{
				return this._NumOfSaved;
			}
			set
			{
				if ((this._NumOfSaved != value))
				{
					this.OnNumOfSavedChanging(value);
					this.SendPropertyChanging();
					this._NumOfSaved = value;
					this.SendPropertyChanged("NumOfSaved");
					this.OnNumOfSavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfPeople", DbType="Int NOT NULL")]
		public int NumOfPeople
		{
			get
			{
				return this._NumOfPeople;
			}
			set
			{
				if ((this._NumOfPeople != value))
				{
					this.OnNumOfPeopleChanging(value);
					this.SendPropertyChanging();
					this._NumOfPeople = value;
					this.SendPropertyChanged("NumOfPeople");
					this.OnNumOfPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfRoom", DbType="Int NOT NULL")]
		public int NumOfRoom
		{
			get
			{
				return this._NumOfRoom;
			}
			set
			{
				if ((this._NumOfRoom != value))
				{
					this.OnNumOfRoomChanging(value);
					this.SendPropertyChanging();
					this._NumOfRoom = value;
					this.SendPropertyChanged("NumOfRoom");
					this.OnNumOfRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfBed", DbType="Int NOT NULL")]
		public int NumOfBed
		{
			get
			{
				return this._NumOfBed;
			}
			set
			{
				if ((this._NumOfBed != value))
				{
					this.OnNumOfBedChanging(value);
					this.SendPropertyChanging();
					this._NumOfBed = value;
					this.SendPropertyChanged("NumOfBed");
					this.OnNumOfBedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfBath", DbType="Int NOT NULL")]
		public int NumOfBath
		{
			get
			{
				return this._NumOfBath;
			}
			set
			{
				if ((this._NumOfBath != value))
				{
					this.OnNumOfBathChanging(value);
					this.SendPropertyChanging();
					this._NumOfBath = value;
					this.SendPropertyChanged("NumOfBath");
					this.OnNumOfBathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowPet", DbType="Bit NOT NULL")]
		public bool AllowPet
		{
			get
			{
				return this._AllowPet;
			}
			set
			{
				if ((this._AllowPet != value))
				{
					this.OnAllowPetChanging(value);
					this.SendPropertyChanging();
					this._AllowPet = value;
					this.SendPropertyChanged("AllowPet");
					this.OnAllowPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasWifi", DbType="Bit NOT NULL")]
		public bool HasWifi
		{
			get
			{
				return this._HasWifi;
			}
			set
			{
				if ((this._HasWifi != value))
				{
					this.OnHasWifiChanging(value);
					this.SendPropertyChanging();
					this._HasWifi = value;
					this.SendPropertyChanged("HasWifi");
					this.OnHasWifiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasAC", DbType="Bit NOT NULL")]
		public bool HasAC
		{
			get
			{
				return this._HasAC;
			}
			set
			{
				if ((this._HasAC != value))
				{
					this.OnHasACChanging(value);
					this.SendPropertyChanging();
					this._HasAC = value;
					this.SendPropertyChanged("HasAC");
					this.OnHasACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasParking", DbType="Bit NOT NULL")]
		public bool HasParking
		{
			get
			{
				return this._HasParking;
			}
			set
			{
				if ((this._HasParking != value))
				{
					this.OnHasParkingChanging(value);
					this.SendPropertyChanging();
					this._HasParking = value;
					this.SendPropertyChanged("HasParking");
					this.OnHasParkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeRestriction", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeRestriction
		{
			get
			{
				return this._TimeRestriction;
			}
			set
			{
				if ((this._TimeRestriction != value))
				{
					this.OnTimeRestrictionChanging(value);
					this.SendPropertyChanging();
					this._TimeRestriction = value;
					this.SendPropertyChanged("TimeRestriction");
					this.OnTimeRestrictionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Decimal(8,2) NOT NULL")]
		public decimal Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfComment", DbType="Int NOT NULL")]
		public int NumOfComment
		{
			get
			{
				return this._NumOfComment;
			}
			set
			{
				if ((this._NumOfComment != value))
				{
					this.OnNumOfCommentChanging(value);
					this.SendPropertyChanging();
					this._NumOfComment = value;
					this.SendPropertyChanged("NumOfComment");
					this.OnNumOfCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Album", Storage="_Albums", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<Album> Albums
		{
			get
			{
				return this._Albums;
			}
			set
			{
				this._Albums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Comment", Storage="_Comments", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_HousingAppointment", Storage="_HousingAppointments", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<HousingAppointment> HousingAppointments
		{
			get
			{
				return this._HousingAppointments;
			}
			set
			{
				this._HousingAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Note", Storage="_Notes", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_SavedHousing", Storage="_SavedHousings", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<SavedHousing> SavedHousings
		{
			get
			{
				return this._SavedHousings;
			}
			set
			{
				this._SavedHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_ShareHousing", Storage="_ShareHousings", ThisKey="HousingID", OtherKey="HousingID")]
		public EntitySet<ShareHousing> ShareHousings
		{
			get
			{
				return this._ShareHousings;
			}
			set
			{
				this._ShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Housing", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Housings.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Housings.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HouseType_Housing", Storage="_HouseType", ThisKey="HouseTypeID", OtherKey="HouseTypeID", IsForeignKey=true)]
		public HouseType HouseType
		{
			get
			{
				return this._HouseType.Entity;
			}
			set
			{
				HouseType previousValue = this._HouseType.Entity;
				if (((previousValue != value) 
							|| (this._HouseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HouseType.Entity = null;
						previousValue.Housings.Remove(this);
					}
					this._HouseType.Entity = value;
					if ((value != null))
					{
						value.Housings.Add(this);
						this._HouseTypeID = value.HouseTypeID;
					}
					else
					{
						this._HouseTypeID = default(int);
					}
					this.SendPropertyChanged("HouseType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Housing", Storage="_ShareSpaceUser", ThisKey="OwnerID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Housings.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Housings.Add(this);
						this._OwnerID = value.UserID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
		
		private void attach_HousingAppointments(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_HousingAppointments(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
		
		private void attach_SavedHousings(SavedHousing entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_SavedHousings(SavedHousing entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
		
		private void attach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Housing = this;
		}
		
		private void detach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Housing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HousingAppointment")]
	public partial class HousingAppointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HousingID;
		
		private int _SenderID;
		
		private int _RecipientID;
		
		private System.DateTimeOffset _AppointmentDateTime;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private string _Content;
		
		private bool _IsOwnerConfirmed;
		
		private bool _IsUserConfirmed;
		
		private int _NumOfRequests;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnRecipientIDChanging(int value);
    partial void OnRecipientIDChanged();
    partial void OnAppointmentDateTimeChanging(System.DateTimeOffset value);
    partial void OnAppointmentDateTimeChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsOwnerConfirmedChanging(bool value);
    partial void OnIsOwnerConfirmedChanged();
    partial void OnIsUserConfirmedChanging(bool value);
    partial void OnIsUserConfirmedChanged();
    partial void OnNumOfRequestsChanging(int value);
    partial void OnNumOfRequestsChanged();
    #endregion
		
		public HousingAppointment()
		{
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			this._ShareSpaceUser1 = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecipientID
		{
			get
			{
				return this._RecipientID;
			}
			set
			{
				if ((this._RecipientID != value))
				{
					if (this._ShareSpaceUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientID = value;
					this.SendPropertyChanged("RecipientID");
					this.OnRecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset AppointmentDateTime
		{
			get
			{
				return this._AppointmentDateTime;
			}
			set
			{
				if ((this._AppointmentDateTime != value))
				{
					this.OnAppointmentDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDateTime = value;
					this.SendPropertyChanged("AppointmentDateTime");
					this.OnAppointmentDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(50)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwnerConfirmed", DbType="Bit NOT NULL")]
		public bool IsOwnerConfirmed
		{
			get
			{
				return this._IsOwnerConfirmed;
			}
			set
			{
				if ((this._IsOwnerConfirmed != value))
				{
					this.OnIsOwnerConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsOwnerConfirmed = value;
					this.SendPropertyChanged("IsOwnerConfirmed");
					this.OnIsOwnerConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUserConfirmed", DbType="Bit NOT NULL")]
		public bool IsUserConfirmed
		{
			get
			{
				return this._IsUserConfirmed;
			}
			set
			{
				if ((this._IsUserConfirmed != value))
				{
					this.OnIsUserConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsUserConfirmed = value;
					this.SendPropertyChanged("IsUserConfirmed");
					this.OnIsUserConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfRequests", DbType="Int NOT NULL")]
		public int NumOfRequests
		{
			get
			{
				return this._NumOfRequests;
			}
			set
			{
				if ((this._NumOfRequests != value))
				{
					this.OnNumOfRequestsChanging(value);
					this.SendPropertyChanging();
					this._NumOfRequests = value;
					this.SendPropertyChanged("NumOfRequests");
					this.OnNumOfRequestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_HousingAppointment", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.HousingAppointments.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.HousingAppointments.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_HousingAppointment", Storage="_ShareSpaceUser", ThisKey="SenderID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.HousingAppointments.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.HousingAppointments.Add(this);
						this._SenderID = value.UserID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_HousingAppointment1", Storage="_ShareSpaceUser1", ThisKey="RecipientID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser1
		{
			get
			{
				return this._ShareSpaceUser1.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser1.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser1.Entity = null;
						previousValue.HousingAppointments1.Remove(this);
					}
					this._ShareSpaceUser1.Entity = value;
					if ((value != null))
					{
						value.HousingAppointments1.Add(this);
						this._RecipientID = value.UserID;
					}
					else
					{
						this._RecipientID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _ConversationID;
		
		private int _SenderID;
		
		private System.DateTimeOffset _DateTimeSend;
		
		private System.DateTimeOffset _DateTimeRead;
		
		private EntityRef<Conversation> _Conversation;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnConversationIDChanging(int value);
    partial void OnConversationIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnDateTimeSendChanging(System.DateTimeOffset value);
    partial void OnDateTimeSendChanged();
    partial void OnDateTimeReadChanging(System.DateTimeOffset value);
    partial void OnDateTimeReadChanged();
    #endregion
		
		public Message()
		{
			this._Conversation = default(EntityRef<Conversation>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationID", DbType="Int NOT NULL")]
		public int ConversationID
		{
			get
			{
				return this._ConversationID;
			}
			set
			{
				if ((this._ConversationID != value))
				{
					if (this._Conversation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversationIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationID = value;
					this.SendPropertyChanged("ConversationID");
					this.OnConversationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeSend", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeSend
		{
			get
			{
				return this._DateTimeSend;
			}
			set
			{
				if ((this._DateTimeSend != value))
				{
					this.OnDateTimeSendChanging(value);
					this.SendPropertyChanging();
					this._DateTimeSend = value;
					this.SendPropertyChanged("DateTimeSend");
					this.OnDateTimeSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeRead", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeRead
		{
			get
			{
				return this._DateTimeRead;
			}
			set
			{
				if ((this._DateTimeRead != value))
				{
					this.OnDateTimeReadChanging(value);
					this.SendPropertyChanging();
					this._DateTimeRead = value;
					this.SendPropertyChanged("DateTimeRead");
					this.OnDateTimeReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Conversation_Message", Storage="_Conversation", ThisKey="ConversationID", OtherKey="ConversationID", IsForeignKey=true)]
		public Conversation Conversation
		{
			get
			{
				return this._Conversation.Entity;
			}
			set
			{
				Conversation previousValue = this._Conversation.Entity;
				if (((previousValue != value) 
							|| (this._Conversation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Conversation.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Conversation.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ConversationID = value.ConversationID;
					}
					else
					{
						this._ConversationID = default(int);
					}
					this.SendPropertyChanged("Conversation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Message", Storage="_ShareSpaceUser", ThisKey="SenderID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._SenderID = value.UserID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Note")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HousingID;
		
		private int _CreatorID;
		
		private System.Nullable<int> _ShareHousingID;
		
		private string _NoteName;
		
		private string _Content;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnShareHousingIDChanging(System.Nullable<int> value);
    partial void OnShareHousingIDChanged();
    partial void OnNoteNameChanging(string value);
    partial void OnNoteNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public Note()
		{
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHousingID", DbType="Int")]
		public System.Nullable<int> ShareHousingID
		{
			get
			{
				return this._ShareHousingID;
			}
			set
			{
				if ((this._ShareHousingID != value))
				{
					this.OnShareHousingIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHousingID = value;
					this.SendPropertyChanged("ShareHousingID");
					this.OnShareHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteName", DbType="NVarChar(255)")]
		public string NoteName
		{
			get
			{
				return this._NoteName;
			}
			set
			{
				if ((this._NoteName != value))
				{
					this.OnNoteNameChanging(value);
					this.SendPropertyChanging();
					this._NoteName = value;
					this.SendPropertyChanged("NoteName");
					this.OnNoteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(500)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_Note", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Note", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoID;
		
		private string _PhotoName;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private int _AlbumID;
		
		private string _Description;
		
		private string _PhotoLink;
		
		private EntityRef<Album> _Album;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnPhotoNameChanging(string value);
    partial void OnPhotoNameChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoLinkChanging(string value);
    partial void OnPhotoLinkChanged();
    #endregion
		
		public Photo()
		{
			this._Album = default(EntityRef<Album>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PhotoName
		{
			get
			{
				return this._PhotoName;
			}
			set
			{
				if ((this._PhotoName != value))
				{
					this.OnPhotoNameChanging(value);
					this.SendPropertyChanging();
					this._PhotoName = value;
					this.SendPropertyChanged("PhotoName");
					this.OnPhotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", DbType="Int NOT NULL")]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoLink", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string PhotoLink
		{
			get
			{
				return this._PhotoLink;
			}
			set
			{
				if ((this._PhotoLink != value))
				{
					this.OnPhotoLinkChanging(value);
					this.SendPropertyChanging();
					this._PhotoLink = value;
					this.SendPropertyChanged("PhotoLink");
					this.OnPhotoLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Photo", Storage="_Album", ThisKey="AlbumID", OtherKey="AlbumID", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._AlbumID = value.AlbumID;
					}
					else
					{
						this._AlbumID = default(int);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SavedHousing")]
	public partial class SavedHousing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HousingID;
		
		private int _CreatorID;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public SavedHousing()
		{
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_SavedHousing", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.SavedHousings.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.SavedHousings.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_SavedHousing", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.SavedHousings.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.SavedHousings.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SavedShareHousing")]
	public partial class SavedShareHousing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShareHousingID;
		
		private int _CreatorID;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private EntityRef<ShareHousing> _ShareHousing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShareHousingIDChanging(int value);
    partial void OnShareHousingIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public SavedShareHousing()
		{
			this._ShareHousing = default(EntityRef<ShareHousing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShareHousingID
		{
			get
			{
				return this._ShareHousingID;
			}
			set
			{
				if ((this._ShareHousingID != value))
				{
					if (this._ShareHousing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareHousingIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHousingID = value;
					this.SendPropertyChanged("ShareHousingID");
					this.OnShareHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareHousing_SavedShareHousing", Storage="_ShareHousing", ThisKey="ShareHousingID", OtherKey="ShareHousingID", IsForeignKey=true)]
		public ShareHousing ShareHousing
		{
			get
			{
				return this._ShareHousing.Entity;
			}
			set
			{
				ShareHousing previousValue = this._ShareHousing.Entity;
				if (((previousValue != value) 
							|| (this._ShareHousing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareHousing.Entity = null;
						previousValue.SavedShareHousings.Remove(this);
					}
					this._ShareHousing.Entity = value;
					if ((value != null))
					{
						value.SavedShareHousings.Add(this);
						this._ShareHousingID = value.ShareHousingID;
					}
					else
					{
						this._ShareHousingID = default(int);
					}
					this.SendPropertyChanged("ShareHousing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_SavedShareHousing", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.SavedShareHousings.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.SavedShareHousings.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.School")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolID;
		
		private string _SchoolName;
		
		private int _SchoolTypeID;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
		private EntityRef<SchoolType> _SchoolType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    partial void OnSchoolTypeIDChanging(int value);
    partial void OnSchoolTypeIDChanged();
    #endregion
		
		public School()
		{
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			this._SchoolType = default(EntityRef<SchoolType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolTypeID", DbType="Int NOT NULL")]
		public int SchoolTypeID
		{
			get
			{
				return this._SchoolTypeID;
			}
			set
			{
				if ((this._SchoolTypeID != value))
				{
					if (this._SchoolType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolTypeID = value;
					this.SendPropertyChanged("SchoolTypeID");
					this.OnSchoolTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="SchoolID", OtherKey="SchoolID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolType_School", Storage="_SchoolType", ThisKey="SchoolTypeID", OtherKey="SchoolTypeID", IsForeignKey=true)]
		public SchoolType SchoolType
		{
			get
			{
				return this._SchoolType.Entity;
			}
			set
			{
				SchoolType previousValue = this._SchoolType.Entity;
				if (((previousValue != value) 
							|| (this._SchoolType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolType.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._SchoolType.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._SchoolTypeID = value.SchoolTypeID;
					}
					else
					{
						this._SchoolTypeID = default(int);
					}
					this.SendPropertyChanged("SchoolType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolType")]
	public partial class SchoolType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolTypeID;
		
		private string _SchoolTypeName;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolTypeIDChanging(int value);
    partial void OnSchoolTypeIDChanged();
    partial void OnSchoolTypeNameChanging(string value);
    partial void OnSchoolTypeNameChanged();
    #endregion
		
		public SchoolType()
		{
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolTypeID
		{
			get
			{
				return this._SchoolTypeID;
			}
			set
			{
				if ((this._SchoolTypeID != value))
				{
					this.OnSchoolTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolTypeID = value;
					this.SendPropertyChanged("SchoolTypeID");
					this.OnSchoolTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolTypeName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string SchoolTypeName
		{
			get
			{
				return this._SchoolTypeName;
			}
			set
			{
				if ((this._SchoolTypeName != value))
				{
					this.OnSchoolTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolTypeName = value;
					this.SendPropertyChanged("SchoolTypeName");
					this.OnSchoolTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolType_School", Storage="_Schools", ThisKey="SchoolTypeID", OtherKey="SchoolTypeID")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.SchoolType = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.SchoolType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShareHousing")]
	public partial class ShareHousing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShareHousingID;
		
		private int _HousingID;
		
		private int _CreatorID;
		
		private bool _IsAvailable;
		
		private int _PricePerMonthOfOne;
		
		private string _Description;
		
		private int _NumOfView;
		
		private int _NumOfSaved;
		
		private int _RequiredNumOfPeople;
		
		private int _RequiredGenderID;
		
		private int _RequiredWorkID;
		
		private bool _AllowSmoking;
		
		private bool _AllowAlcohol;
		
		private bool _HasPrivateKey;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private System.Nullable<System.DateTimeOffset> _DateTimeExpired;
		
		private EntitySet<SavedShareHousing> _SavedShareHousings;
		
		private EntitySet<ShareHousingAppointment> _ShareHousingAppointments;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Housing> _Housing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShareHousingIDChanging(int value);
    partial void OnShareHousingIDChanged();
    partial void OnHousingIDChanging(int value);
    partial void OnHousingIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnPricePerMonthOfOneChanging(int value);
    partial void OnPricePerMonthOfOneChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNumOfViewChanging(int value);
    partial void OnNumOfViewChanged();
    partial void OnNumOfSavedChanging(int value);
    partial void OnNumOfSavedChanged();
    partial void OnRequiredNumOfPeopleChanging(int value);
    partial void OnRequiredNumOfPeopleChanged();
    partial void OnRequiredGenderIDChanging(int value);
    partial void OnRequiredGenderIDChanged();
    partial void OnRequiredWorkIDChanging(int value);
    partial void OnRequiredWorkIDChanged();
    partial void OnAllowSmokingChanging(bool value);
    partial void OnAllowSmokingChanged();
    partial void OnAllowAlcoholChanging(bool value);
    partial void OnAllowAlcoholChanged();
    partial void OnHasPrivateKeyChanging(bool value);
    partial void OnHasPrivateKeyChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnDateTimeExpiredChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnDateTimeExpiredChanged();
    #endregion
		
		public ShareHousing()
		{
			this._SavedShareHousings = new EntitySet<SavedShareHousing>(new Action<SavedShareHousing>(this.attach_SavedShareHousings), new Action<SavedShareHousing>(this.detach_SavedShareHousings));
			this._ShareHousingAppointments = new EntitySet<ShareHousingAppointment>(new Action<ShareHousingAppointment>(this.attach_ShareHousingAppointments), new Action<ShareHousingAppointment>(this.detach_ShareHousingAppointments));
			this._Gender = default(EntityRef<Gender>);
			this._Housing = default(EntityRef<Housing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHousingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShareHousingID
		{
			get
			{
				return this._ShareHousingID;
			}
			set
			{
				if ((this._ShareHousingID != value))
				{
					this.OnShareHousingIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHousingID = value;
					this.SendPropertyChanged("ShareHousingID");
					this.OnShareHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HousingID", DbType="Int NOT NULL")]
		public int HousingID
		{
			get
			{
				return this._HousingID;
			}
			set
			{
				if ((this._HousingID != value))
				{
					if (this._Housing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHousingIDChanging(value);
					this.SendPropertyChanging();
					this._HousingID = value;
					this.SendPropertyChanged("HousingID");
					this.OnHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL")]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerMonthOfOne", DbType="Int NOT NULL")]
		public int PricePerMonthOfOne
		{
			get
			{
				return this._PricePerMonthOfOne;
			}
			set
			{
				if ((this._PricePerMonthOfOne != value))
				{
					this.OnPricePerMonthOfOneChanging(value);
					this.SendPropertyChanging();
					this._PricePerMonthOfOne = value;
					this.SendPropertyChanged("PricePerMonthOfOne");
					this.OnPricePerMonthOfOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfView", DbType="Int NOT NULL")]
		public int NumOfView
		{
			get
			{
				return this._NumOfView;
			}
			set
			{
				if ((this._NumOfView != value))
				{
					this.OnNumOfViewChanging(value);
					this.SendPropertyChanging();
					this._NumOfView = value;
					this.SendPropertyChanged("NumOfView");
					this.OnNumOfViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfSaved", DbType="Int NOT NULL")]
		public int NumOfSaved
		{
			get
			{
				return this._NumOfSaved;
			}
			set
			{
				if ((this._NumOfSaved != value))
				{
					this.OnNumOfSavedChanging(value);
					this.SendPropertyChanging();
					this._NumOfSaved = value;
					this.SendPropertyChanged("NumOfSaved");
					this.OnNumOfSavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredNumOfPeople", DbType="Int NOT NULL")]
		public int RequiredNumOfPeople
		{
			get
			{
				return this._RequiredNumOfPeople;
			}
			set
			{
				if ((this._RequiredNumOfPeople != value))
				{
					this.OnRequiredNumOfPeopleChanging(value);
					this.SendPropertyChanging();
					this._RequiredNumOfPeople = value;
					this.SendPropertyChanged("RequiredNumOfPeople");
					this.OnRequiredNumOfPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredGenderID", DbType="Int NOT NULL")]
		public int RequiredGenderID
		{
			get
			{
				return this._RequiredGenderID;
			}
			set
			{
				if ((this._RequiredGenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequiredGenderIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredGenderID = value;
					this.SendPropertyChanged("RequiredGenderID");
					this.OnRequiredGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredWorkID", DbType="Int NOT NULL")]
		public int RequiredWorkID
		{
			get
			{
				return this._RequiredWorkID;
			}
			set
			{
				if ((this._RequiredWorkID != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequiredWorkIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredWorkID = value;
					this.SendPropertyChanged("RequiredWorkID");
					this.OnRequiredWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowSmoking", DbType="Bit NOT NULL")]
		public bool AllowSmoking
		{
			get
			{
				return this._AllowSmoking;
			}
			set
			{
				if ((this._AllowSmoking != value))
				{
					this.OnAllowSmokingChanging(value);
					this.SendPropertyChanging();
					this._AllowSmoking = value;
					this.SendPropertyChanged("AllowSmoking");
					this.OnAllowSmokingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAlcohol", DbType="Bit NOT NULL")]
		public bool AllowAlcohol
		{
			get
			{
				return this._AllowAlcohol;
			}
			set
			{
				if ((this._AllowAlcohol != value))
				{
					this.OnAllowAlcoholChanging(value);
					this.SendPropertyChanging();
					this._AllowAlcohol = value;
					this.SendPropertyChanged("AllowAlcohol");
					this.OnAllowAlcoholChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPrivateKey", DbType="Bit NOT NULL")]
		public bool HasPrivateKey
		{
			get
			{
				return this._HasPrivateKey;
			}
			set
			{
				if ((this._HasPrivateKey != value))
				{
					this.OnHasPrivateKeyChanging(value);
					this.SendPropertyChanging();
					this._HasPrivateKey = value;
					this.SendPropertyChanged("HasPrivateKey");
					this.OnHasPrivateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeExpired", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> DateTimeExpired
		{
			get
			{
				return this._DateTimeExpired;
			}
			set
			{
				if ((this._DateTimeExpired != value))
				{
					this.OnDateTimeExpiredChanging(value);
					this.SendPropertyChanging();
					this._DateTimeExpired = value;
					this.SendPropertyChanged("DateTimeExpired");
					this.OnDateTimeExpiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareHousing_SavedShareHousing", Storage="_SavedShareHousings", ThisKey="ShareHousingID", OtherKey="ShareHousingID")]
		public EntitySet<SavedShareHousing> SavedShareHousings
		{
			get
			{
				return this._SavedShareHousings;
			}
			set
			{
				this._SavedShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareHousing_ShareHousingAppointment", Storage="_ShareHousingAppointments", ThisKey="ShareHousingID", OtherKey="ShareHousingID")]
		public EntitySet<ShareHousingAppointment> ShareHousingAppointments
		{
			get
			{
				return this._ShareHousingAppointments;
			}
			set
			{
				this._ShareHousingAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_ShareHousing", Storage="_Gender", ThisKey="RequiredGenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.ShareHousings.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.ShareHousings.Add(this);
						this._RequiredGenderID = value.GenderID;
					}
					else
					{
						this._RequiredGenderID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Housing_ShareHousing", Storage="_Housing", ThisKey="HousingID", OtherKey="HousingID", IsForeignKey=true)]
		public Housing Housing
		{
			get
			{
				return this._Housing.Entity;
			}
			set
			{
				Housing previousValue = this._Housing.Entity;
				if (((previousValue != value) 
							|| (this._Housing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Housing.Entity = null;
						previousValue.ShareHousings.Remove(this);
					}
					this._Housing.Entity = value;
					if ((value != null))
					{
						value.ShareHousings.Add(this);
						this._HousingID = value.HousingID;
					}
					else
					{
						this._HousingID = default(int);
					}
					this.SendPropertyChanged("Housing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousing", Storage="_ShareSpaceUser", ThisKey="CreatorID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.ShareHousings.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.ShareHousings.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_ShareHousing", Storage="_Work", ThisKey="RequiredWorkID", OtherKey="WorkID", IsForeignKey=true)]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.ShareHousings.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.ShareHousings.Add(this);
						this._RequiredWorkID = value.WorkID;
					}
					else
					{
						this._RequiredWorkID = default(int);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavedShareHousings(SavedShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareHousing = this;
		}
		
		private void detach_SavedShareHousings(SavedShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareHousing = null;
		}
		
		private void attach_ShareHousingAppointments(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareHousing = this;
		}
		
		private void detach_ShareHousingAppointments(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareHousing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShareHousingAppointment")]
	public partial class ShareHousingAppointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShareHousingID;
		
		private int _SenderID;
		
		private int _RecipientID;
		
		private System.DateTimeOffset _AppointmentDateTime;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private string _Content;
		
		private bool _IsCreatorConfirmed;
		
		private bool _IsUserConfirmed;
		
		private int _NumOfRequests;
		
		private EntityRef<ShareHousing> _ShareHousing;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser;
		
		private EntityRef<ShareSpaceUser> _ShareSpaceUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShareHousingIDChanging(int value);
    partial void OnShareHousingIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnRecipientIDChanging(int value);
    partial void OnRecipientIDChanged();
    partial void OnAppointmentDateTimeChanging(System.DateTimeOffset value);
    partial void OnAppointmentDateTimeChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsCreatorConfirmedChanging(bool value);
    partial void OnIsCreatorConfirmedChanged();
    partial void OnIsUserConfirmedChanging(bool value);
    partial void OnIsUserConfirmedChanged();
    partial void OnNumOfRequestsChanging(int value);
    partial void OnNumOfRequestsChanged();
    #endregion
		
		public ShareHousingAppointment()
		{
			this._ShareHousing = default(EntityRef<ShareHousing>);
			this._ShareSpaceUser = default(EntityRef<ShareSpaceUser>);
			this._ShareSpaceUser1 = default(EntityRef<ShareSpaceUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHousingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShareHousingID
		{
			get
			{
				return this._ShareHousingID;
			}
			set
			{
				if ((this._ShareHousingID != value))
				{
					if (this._ShareHousing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareHousingIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHousingID = value;
					this.SendPropertyChanged("ShareHousingID");
					this.OnShareHousingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._ShareSpaceUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecipientID
		{
			get
			{
				return this._RecipientID;
			}
			set
			{
				if ((this._RecipientID != value))
				{
					if (this._ShareSpaceUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientID = value;
					this.SendPropertyChanged("RecipientID");
					this.OnRecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset AppointmentDateTime
		{
			get
			{
				return this._AppointmentDateTime;
			}
			set
			{
				if ((this._AppointmentDateTime != value))
				{
					this.OnAppointmentDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDateTime = value;
					this.SendPropertyChanged("AppointmentDateTime");
					this.OnAppointmentDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(50)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCreatorConfirmed", DbType="Bit NOT NULL")]
		public bool IsCreatorConfirmed
		{
			get
			{
				return this._IsCreatorConfirmed;
			}
			set
			{
				if ((this._IsCreatorConfirmed != value))
				{
					this.OnIsCreatorConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsCreatorConfirmed = value;
					this.SendPropertyChanged("IsCreatorConfirmed");
					this.OnIsCreatorConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUserConfirmed", DbType="Bit NOT NULL")]
		public bool IsUserConfirmed
		{
			get
			{
				return this._IsUserConfirmed;
			}
			set
			{
				if ((this._IsUserConfirmed != value))
				{
					this.OnIsUserConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsUserConfirmed = value;
					this.SendPropertyChanged("IsUserConfirmed");
					this.OnIsUserConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfRequests", DbType="Int NOT NULL")]
		public int NumOfRequests
		{
			get
			{
				return this._NumOfRequests;
			}
			set
			{
				if ((this._NumOfRequests != value))
				{
					this.OnNumOfRequestsChanging(value);
					this.SendPropertyChanging();
					this._NumOfRequests = value;
					this.SendPropertyChanged("NumOfRequests");
					this.OnNumOfRequestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareHousing_ShareHousingAppointment", Storage="_ShareHousing", ThisKey="ShareHousingID", OtherKey="ShareHousingID", IsForeignKey=true)]
		public ShareHousing ShareHousing
		{
			get
			{
				return this._ShareHousing.Entity;
			}
			set
			{
				ShareHousing previousValue = this._ShareHousing.Entity;
				if (((previousValue != value) 
							|| (this._ShareHousing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareHousing.Entity = null;
						previousValue.ShareHousingAppointments.Remove(this);
					}
					this._ShareHousing.Entity = value;
					if ((value != null))
					{
						value.ShareHousingAppointments.Add(this);
						this._ShareHousingID = value.ShareHousingID;
					}
					else
					{
						this._ShareHousingID = default(int);
					}
					this.SendPropertyChanged("ShareHousing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousingAppointment", Storage="_ShareSpaceUser", ThisKey="SenderID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser
		{
			get
			{
				return this._ShareSpaceUser.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser.Entity = null;
						previousValue.ShareHousingAppointments.Remove(this);
					}
					this._ShareSpaceUser.Entity = value;
					if ((value != null))
					{
						value.ShareHousingAppointments.Add(this);
						this._SenderID = value.UserID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousingAppointment1", Storage="_ShareSpaceUser1", ThisKey="RecipientID", OtherKey="UserID", IsForeignKey=true)]
		public ShareSpaceUser ShareSpaceUser1
		{
			get
			{
				return this._ShareSpaceUser1.Entity;
			}
			set
			{
				ShareSpaceUser previousValue = this._ShareSpaceUser1.Entity;
				if (((previousValue != value) 
							|| (this._ShareSpaceUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShareSpaceUser1.Entity = null;
						previousValue.ShareHousingAppointments1.Remove(this);
					}
					this._ShareSpaceUser1.Entity = value;
					if ((value != null))
					{
						value.ShareHousingAppointments1.Add(this);
						this._RecipientID = value.UserID;
					}
					else
					{
						this._RecipientID = default(int);
					}
					this.SendPropertyChanged("ShareSpaceUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShareSpaceUser")]
	public partial class ShareSpaceUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UID;
		
		private string _ProfilePhotoURL;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _GenderID;
		
		private string _DOB;
		
		private int _EmailID;
		
		private string _PhoneNumber;
		
		private System.Nullable<int> _AddressID;
		
		private System.Nullable<int> _SchoolID;
		
		private System.Nullable<int> _StartSchoolYear;
		
		private System.Nullable<int> _WorkID;
		
		private System.Nullable<int> _HometownID;
		
		private string _Description;
		
		private int _NumOfNote;
		
		private System.DateTimeOffset _DateTimeCreated;
		
		private string _DeviceTokens;
		
		private EntitySet<Album> _Albums;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Conversation> _Conversations;
		
		private EntitySet<Conversation> _Conversations1;
		
		private EntitySet<Housing> _Housings;
		
		private EntitySet<HousingAppointment> _HousingAppointments;
		
		private EntitySet<HousingAppointment> _HousingAppointments1;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<SavedHousing> _SavedHousings;
		
		private EntitySet<SavedShareHousing> _SavedShareHousings;
		
		private EntitySet<ShareHousing> _ShareHousings;
		
		private EntitySet<ShareHousingAppointment> _ShareHousingAppointments;
		
		private EntitySet<ShareHousingAppointment> _ShareHousingAppointments1;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<City> _City;
		
		private EntityRef<Email> _Email;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<School> _School;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnProfilePhotoURLChanging(string value);
    partial void OnProfilePhotoURLChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnEmailIDChanging(int value);
    partial void OnEmailIDChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressIDChanging(System.Nullable<int> value);
    partial void OnAddressIDChanged();
    partial void OnSchoolIDChanging(System.Nullable<int> value);
    partial void OnSchoolIDChanged();
    partial void OnStartSchoolYearChanging(System.Nullable<int> value);
    partial void OnStartSchoolYearChanged();
    partial void OnWorkIDChanging(System.Nullable<int> value);
    partial void OnWorkIDChanged();
    partial void OnHometownIDChanging(System.Nullable<int> value);
    partial void OnHometownIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNumOfNoteChanging(int value);
    partial void OnNumOfNoteChanged();
    partial void OnDateTimeCreatedChanging(System.DateTimeOffset value);
    partial void OnDateTimeCreatedChanged();
    partial void OnDeviceTokensChanging(string value);
    partial void OnDeviceTokensChanged();
    #endregion
		
		public ShareSpaceUser()
		{
			this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Conversations = new EntitySet<Conversation>(new Action<Conversation>(this.attach_Conversations), new Action<Conversation>(this.detach_Conversations));
			this._Conversations1 = new EntitySet<Conversation>(new Action<Conversation>(this.attach_Conversations1), new Action<Conversation>(this.detach_Conversations1));
			this._Housings = new EntitySet<Housing>(new Action<Housing>(this.attach_Housings), new Action<Housing>(this.detach_Housings));
			this._HousingAppointments = new EntitySet<HousingAppointment>(new Action<HousingAppointment>(this.attach_HousingAppointments), new Action<HousingAppointment>(this.detach_HousingAppointments));
			this._HousingAppointments1 = new EntitySet<HousingAppointment>(new Action<HousingAppointment>(this.attach_HousingAppointments1), new Action<HousingAppointment>(this.detach_HousingAppointments1));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._SavedHousings = new EntitySet<SavedHousing>(new Action<SavedHousing>(this.attach_SavedHousings), new Action<SavedHousing>(this.detach_SavedHousings));
			this._SavedShareHousings = new EntitySet<SavedShareHousing>(new Action<SavedShareHousing>(this.attach_SavedShareHousings), new Action<SavedShareHousing>(this.detach_SavedShareHousings));
			this._ShareHousings = new EntitySet<ShareHousing>(new Action<ShareHousing>(this.attach_ShareHousings), new Action<ShareHousing>(this.detach_ShareHousings));
			this._ShareHousingAppointments = new EntitySet<ShareHousingAppointment>(new Action<ShareHousingAppointment>(this.attach_ShareHousingAppointments), new Action<ShareHousingAppointment>(this.detach_ShareHousingAppointments));
			this._ShareHousingAppointments1 = new EntitySet<ShareHousingAppointment>(new Action<ShareHousingAppointment>(this.attach_ShareHousingAppointments1), new Action<ShareHousingAppointment>(this.detach_ShareHousingAppointments1));
			this._Address = default(EntityRef<Address>);
			this._City = default(EntityRef<City>);
			this._Email = default(EntityRef<Email>);
			this._Gender = default(EntityRef<Gender>);
			this._School = default(EntityRef<School>);
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePhotoURL", DbType="VarChar(500)")]
		public string ProfilePhotoURL
		{
			get
			{
				return this._ProfilePhotoURL;
			}
			set
			{
				if ((this._ProfilePhotoURL != value))
				{
					this.OnProfilePhotoURLChanging(value);
					this.SendPropertyChanging();
					this._ProfilePhotoURL = value;
					this.SendPropertyChanged("ProfilePhotoURL");
					this.OnProfilePhotoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Int NOT NULL")]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", DbType="Int NOT NULL")]
		public int EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					if (this._Email.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int")]
		public System.Nullable<int> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int")]
		public System.Nullable<int> SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartSchoolYear", DbType="Int")]
		public System.Nullable<int> StartSchoolYear
		{
			get
			{
				return this._StartSchoolYear;
			}
			set
			{
				if ((this._StartSchoolYear != value))
				{
					this.OnStartSchoolYearChanging(value);
					this.SendPropertyChanging();
					this._StartSchoolYear = value;
					this.SendPropertyChanged("StartSchoolYear");
					this.OnStartSchoolYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", DbType="Int")]
		public System.Nullable<int> WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HometownID", DbType="Int")]
		public System.Nullable<int> HometownID
		{
			get
			{
				return this._HometownID;
			}
			set
			{
				if ((this._HometownID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHometownIDChanging(value);
					this.SendPropertyChanging();
					this._HometownID = value;
					this.SendPropertyChanged("HometownID");
					this.OnHometownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfNote", DbType="Int NOT NULL")]
		public int NumOfNote
		{
			get
			{
				return this._NumOfNote;
			}
			set
			{
				if ((this._NumOfNote != value))
				{
					this.OnNumOfNoteChanging(value);
					this.SendPropertyChanging();
					this._NumOfNote = value;
					this.SendPropertyChanged("NumOfNote");
					this.OnNumOfNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceTokens", DbType="VarChar(MAX)")]
		public string DeviceTokens
		{
			get
			{
				return this._DeviceTokens;
			}
			set
			{
				if ((this._DeviceTokens != value))
				{
					this.OnDeviceTokensChanging(value);
					this.SendPropertyChanging();
					this._DeviceTokens = value;
					this.SendPropertyChanged("DeviceTokens");
					this.OnDeviceTokensChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Album", Storage="_Albums", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<Album> Albums
		{
			get
			{
				return this._Albums;
			}
			set
			{
				this._Albums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Comment", Storage="_Comments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Conversation", Storage="_Conversations", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<Conversation> Conversations
		{
			get
			{
				return this._Conversations;
			}
			set
			{
				this._Conversations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Conversation1", Storage="_Conversations1", ThisKey="UserID", OtherKey="RecipientID")]
		public EntitySet<Conversation> Conversations1
		{
			get
			{
				return this._Conversations1;
			}
			set
			{
				this._Conversations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Housing", Storage="_Housings", ThisKey="UserID", OtherKey="OwnerID")]
		public EntitySet<Housing> Housings
		{
			get
			{
				return this._Housings;
			}
			set
			{
				this._Housings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_HousingAppointment", Storage="_HousingAppointments", ThisKey="UserID", OtherKey="SenderID")]
		public EntitySet<HousingAppointment> HousingAppointments
		{
			get
			{
				return this._HousingAppointments;
			}
			set
			{
				this._HousingAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_HousingAppointment1", Storage="_HousingAppointments1", ThisKey="UserID", OtherKey="RecipientID")]
		public EntitySet<HousingAppointment> HousingAppointments1
		{
			get
			{
				return this._HousingAppointments1;
			}
			set
			{
				this._HousingAppointments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Message", Storage="_Messages", ThisKey="UserID", OtherKey="SenderID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_Note", Storage="_Notes", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_SavedHousing", Storage="_SavedHousings", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<SavedHousing> SavedHousings
		{
			get
			{
				return this._SavedHousings;
			}
			set
			{
				this._SavedHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_SavedShareHousing", Storage="_SavedShareHousings", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<SavedShareHousing> SavedShareHousings
		{
			get
			{
				return this._SavedShareHousings;
			}
			set
			{
				this._SavedShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousing", Storage="_ShareHousings", ThisKey="UserID", OtherKey="CreatorID")]
		public EntitySet<ShareHousing> ShareHousings
		{
			get
			{
				return this._ShareHousings;
			}
			set
			{
				this._ShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousingAppointment", Storage="_ShareHousingAppointments", ThisKey="UserID", OtherKey="SenderID")]
		public EntitySet<ShareHousingAppointment> ShareHousingAppointments
		{
			get
			{
				return this._ShareHousingAppointments;
			}
			set
			{
				this._ShareHousingAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShareSpaceUser_ShareHousingAppointment1", Storage="_ShareHousingAppointments1", ThisKey="UserID", OtherKey="RecipientID")]
		public EntitySet<ShareHousingAppointment> ShareHousingAppointments1
		{
			get
			{
				return this._ShareHousingAppointments1;
			}
			set
			{
				this._ShareHousingAppointments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ShareSpaceUser", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ShareSpaceUser", Storage="_City", ThisKey="HometownID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._HometownID = value.CityID;
					}
					else
					{
						this._HometownID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_ShareSpaceUser", Storage="_Email", ThisKey="EmailID", OtherKey="EmailID", IsForeignKey=true)]
		public Email Email
		{
			get
			{
				return this._Email.Entity;
			}
			set
			{
				Email previousValue = this._Email.Entity;
				if (((previousValue != value) 
							|| (this._Email.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Email.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._Email.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._EmailID = value.EmailID;
					}
					else
					{
						this._EmailID = default(int);
					}
					this.SendPropertyChanged("Email");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_ShareSpaceUser", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_ShareSpaceUser", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(Nullable<int>);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_ShareSpaceUser", Storage="_Work", ThisKey="WorkID", OtherKey="WorkID", IsForeignKey=true)]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.ShareSpaceUsers.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.ShareSpaceUsers.Add(this);
						this._WorkID = value.WorkID;
					}
					else
					{
						this._WorkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_Conversations(Conversation entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Conversations(Conversation entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_Conversations1(Conversation entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = this;
		}
		
		private void detach_Conversations1(Conversation entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = null;
		}
		
		private void attach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Housings(Housing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_HousingAppointments(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_HousingAppointments(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_HousingAppointments1(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = this;
		}
		
		private void detach_HousingAppointments1(HousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_SavedHousings(SavedHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_SavedHousings(SavedHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_SavedShareHousings(SavedShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_SavedShareHousings(SavedShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_ShareHousingAppointments(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = this;
		}
		
		private void detach_ShareHousingAppointments(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser = null;
		}
		
		private void attach_ShareHousingAppointments1(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = this;
		}
		
		private void detach_ShareHousingAppointments1(ShareHousingAppointment entity)
		{
			this.SendPropertyChanging();
			entity.ShareSpaceUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Work]")]
	public partial class Work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkID;
		
		private string _WorkType;
		
		private EntitySet<ShareHousing> _ShareHousings;
		
		private EntitySet<ShareSpaceUser> _ShareSpaceUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkIDChanging(int value);
    partial void OnWorkIDChanged();
    partial void OnWorkTypeChanging(string value);
    partial void OnWorkTypeChanged();
    #endregion
		
		public Work()
		{
			this._ShareHousings = new EntitySet<ShareHousing>(new Action<ShareHousing>(this.attach_ShareHousings), new Action<ShareHousing>(this.detach_ShareHousings));
			this._ShareSpaceUsers = new EntitySet<ShareSpaceUser>(new Action<ShareSpaceUser>(this.attach_ShareSpaceUsers), new Action<ShareSpaceUser>(this.detach_ShareSpaceUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string WorkType
		{
			get
			{
				return this._WorkType;
			}
			set
			{
				if ((this._WorkType != value))
				{
					this.OnWorkTypeChanging(value);
					this.SendPropertyChanging();
					this._WorkType = value;
					this.SendPropertyChanged("WorkType");
					this.OnWorkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_ShareHousing", Storage="_ShareHousings", ThisKey="WorkID", OtherKey="RequiredWorkID")]
		public EntitySet<ShareHousing> ShareHousings
		{
			get
			{
				return this._ShareHousings;
			}
			set
			{
				this._ShareHousings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_ShareSpaceUser", Storage="_ShareSpaceUsers", ThisKey="WorkID", OtherKey="WorkID")]
		public EntitySet<ShareSpaceUser> ShareSpaceUsers
		{
			get
			{
				return this._ShareSpaceUsers;
			}
			set
			{
				this._ShareSpaceUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_ShareHousings(ShareHousing entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
		
		private void attach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_ShareSpaceUsers(ShareSpaceUser entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
	}
}
#pragma warning restore 1591
